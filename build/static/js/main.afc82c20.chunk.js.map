{"version":3,"sources":["spinner.svg","index.tsx"],"names":["url","process","Wrapper","styled","div","InputWrapper","Input","input","TodoList","Checkbox","Description","span","DeleteButton","button","Item","SpinnerTodoList","img","SpinnerInput","SpinnerCheckbox","asset_spinner","App","useState","list","setList","title","setTitle","isLoadingTodoList","setIsLoadingTodoList","isLoadingInput","setIsLoadingInput","isLoadingCheckboxById","setIsLoadingCheckboxById","useEffect","setInterval","pullList","id","axios","get","then","response","data","type","placeholder","value","onChange","event","currentTarget","onKeyPress","key","post","src","alt","map","item","defaultChecked","disabled","checked","isFinish","put","onClick","delete","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPAAe,G,MAAA,IAA0B,qC,OCSnCA,EAAMC,6BAENC,EAAUC,IAAOC,IAAV,8UAYPC,EAAeF,IAAOC,IAAV,qFAMZE,EAAQH,IAAOI,MAAV,gYA0BLC,EAAWL,IAAOC,IAAV,kEAKRK,EAAWN,IAAOI,MAAV,saAwBRG,EAAcP,IAAOQ,KAAV,8LAUXC,EAAeT,IAAOU,OAAV,qSAqBZC,EAAOX,IAAOC,IAAV,uPAUJQ,GAMAG,EAAkBZ,IAAOa,IAAV,oEAKfC,EAAed,IAAOa,IAAV,+FAOZE,EAAkBf,YAAOM,EAAPN,CAAH,2MAGAgB,GAQrB,SAASC,IACP,MAAwBC,mBAAiB,IAAzC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAkDJ,oBAAS,GAA3D,mBAAOK,EAAP,KAA0BC,EAA1B,KACA,EAA4CN,oBAAS,GAArD,mBAAOO,EAAP,KAAuBC,EAAvB,KACA,EAA0DR,mBAAS,IAAnE,mBAAOS,EAAP,KAA8BC,EAA9B,KAEAC,qBAAU,WACRL,GAAqB,GAErBM,aAAY,WACVC,MACC,OACF,IAEH,IAAMA,EAAW,SAACC,GAChBC,IAAMC,IAAIrC,EAAM,cAAcsC,MAAK,SAAAC,GACjCZ,GAAqB,GACrB,IAAQa,EAASD,EAATC,KACRjB,EAAQiB,GACRT,EAAyB,IACzBF,GAAkB,GAClBJ,EAAS,QA0Bb,OACE,eAACvB,EAAD,WACE,eAACG,EAAD,WACE,cAACC,EAAD,CACEmC,KAAK,OACLC,YAAY,iBACZC,MAAOnB,EACPoB,SAAU,SAAAC,GACHjB,GACHH,EAASoB,EAAMC,cAAcH,QAGjCI,WAlCmB,SAACF,GACZ,KAAVrB,GAA8B,UAAdqB,EAAMG,MACxBnB,GAAkB,GAClBO,IAAMa,KAAKjD,EAAM,aAAc,CAAEwB,UAASc,MAAK,SAAAC,GAC7CL,WAgCCN,EAAiB,cAACX,EAAD,CAAciC,IAAK/B,EAAegC,IAAI,kBAAqB,QAE/E,cAAC3C,EAAD,UACGkB,EACC,cAACX,EAAD,CAAiBmC,IAAK/B,EAAegC,IAAI,kBAEzC,mCACG7B,EAAK8B,KAAI,SAAAC,GAAI,OACZ,eAACvC,EAAD,WACGgB,IAA0BuB,EAAKlB,GAC9B,cAACjB,EAAD,CAAiBuB,KAAK,WAAWa,gBAAc,EAACC,UAAQ,IAExD,cAAC9C,EAAD,CAAUgC,KAAK,WAAWe,QAASH,EAAKI,SAAUb,SAAU,kBAjClDT,EAiCyEkB,EAAKlB,GAhCtGJ,EAAyBI,QACzBC,IAAMsB,IAAI1D,EAAM,cAAgBmC,GAAIG,MAAK,SAAAC,GACvCL,EAASC,MAHY,IAACA,KAmCZ,cAACzB,EAAD,UAAc2C,EAAK7B,QACnB,cAACZ,EAAD,CAAc+C,QAAS,kBA1CXxB,EA0CkCkB,EAAKlB,QAzC/DC,IAAMwB,OAAO5D,EAAM,cAAgBmC,GAAIG,MAAK,SAAAC,GAC1CL,OAFqB,IAACC,OAmCHkB,EAAKlB,cAiB9B0B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC3C,EAAD,MAEF4C,SAASC,eAAe,W","file":"static/js/main.afc82c20.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/spinner.b4ec1ef2.svg\";","import React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\nimport styled from 'styled-components';\n\nimport './base.scss';\nimport { Todo } from './types';\nimport asset_spinner from './spinner.svg';\n\nconst url = process.env.REACT_APP_BASE_URL;\n\nconst Wrapper = styled.div`\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans',\n    'Helvetica Neue', sans-serif;\n  width: 100vw;\n  min-height: 100vh;\n  padding-top: 60px;\n  background-color: #f5f6ee;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst InputWrapper = styled.div`\n  width: 276px;\n  height: 45px;\n  position: relative;\n`;\n\nconst Input = styled.input`\n  border: none;\n  border-bottom: 2px solid #000000;\n  width: 100%;\n  height: 100%;\n  background-color: #f5f6ee;\n  text-align: center;\n  font-size: 14px;\n\n  &::placeholder {\n    color: #c4c4c4;\n  }\n\n  &:hover::placeholder {\n    color: #979797;\n  }\n\n  &:focus {\n    outline: none;\n\n    &::placeholder {\n      color: #979797;\n    }\n  }\n`;\n\nconst TodoList = styled.div`\n  width: 276px;\n  margin-top: 44px;\n`;\n\nconst Checkbox = styled.input`\n  &[type='checkbox'] {\n    width: 20px;\n    height: 20px;\n    border-radius: 5px;\n    outline: none;\n    background-color: white;\n    border: 0.2px solid #979797;\n    appearance: none;\n    position: relative;\n\n    &:hover {\n      cursor: pointer;\n    }\n\n    &:checked:after {\n      content: '✓';\n      position: absolute;\n      top: -3.5px;\n      left: 3px;\n    }\n  }\n`;\n\nconst Description = styled.span`\n  font-size: 14px;\n  margin-left: 10px;\n  line-height: 16.41px;\n  margin-top: 2px;\n  width: 224px;\n  word-break: break-all;\n  /* background-color: red; */\n`;\n\nconst DeleteButton = styled.button`\n  /* background: yellow; */\n  margin-left: 5px;\n  height: 20px;\n  margin-top: -2px;\n\n  &:after {\n    color: #979797;\n    content: '✕';\n    visibility: hidden;\n  }\n\n  &:hover:after {\n    color: #000000;\n  }\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst Item = styled.div`\n  width: 100%;\n  margin-bottom: 12px;\n  display: flex;\n  border-radius: 5px;\n  /* background-color: lime; */\n\n  &:hover {\n    background-color: #e4e7d5;\n\n    ${DeleteButton}:after {\n      visibility: visible;\n    }\n  }\n`;\n\nconst SpinnerTodoList = styled.img`\n  text-align: center;\n  height: 20px;\n`;\n\nconst SpinnerInput = styled.img`\n  position: absolute;\n  height: 15px;\n  right: 0;\n  top: 14px;\n`;\n\nconst SpinnerCheckbox = styled(Checkbox)`\n  &[type='checkbox'] {\n    &:checked:after {\n      content: url(${asset_spinner});\n      transform: scale(0.063);\n      transform-origin: left top;\n      margin-top: 6px;\n    }\n  }\n`;\n\nfunction App() {\n  const [list, setList] = useState<Todo[]>([]);\n  const [title, setTitle] = useState('');\n  const [isLoadingTodoList, setIsLoadingTodoList] = useState(false);\n  const [isLoadingInput, setIsLoadingInput] = useState(false);\n  const [isLoadingCheckboxById, setIsLoadingCheckboxById] = useState('');\n\n  useEffect(() => {\n    setIsLoadingTodoList(true);\n\n    setInterval(() => {\n      pullList();\n    }, 1000);\n  }, []);\n\n  const pullList = (id?: string) => {\n    axios.get(url + '/todo-list').then(response => {\n      setIsLoadingTodoList(false);\n      const { data } = response;\n      setList(data);\n      setIsLoadingCheckboxById('');\n      setIsLoadingInput(false);\n      setTitle('');\n    });\n  };\n\n  const handleEnterNewItem = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (title !== '' && event.key === 'Enter') {\n      setIsLoadingInput(true);\n      axios.post(url + '/todo-list', { title }).then(response => {\n        pullList();\n      });\n    }\n  };\n\n  const handleDeleteItem = (id: string) => {\n    axios.delete(url + '/todo-list/' + id).then(response => {\n      pullList();\n    });\n  };\n\n  const toggleFinishItem = (id: string) => {\n    setIsLoadingCheckboxById(id);\n    axios.put(url + '/todo-list/' + id).then(response => {\n      pullList(id);\n    });\n  };\n\n  return (\n    <Wrapper>\n      <InputWrapper>\n        <Input\n          type=\"text\"\n          placeholder=\"Enter new task\"\n          value={title}\n          onChange={event => {\n            if (!isLoadingInput) {\n              setTitle(event.currentTarget.value);\n            }\n          }}\n          onKeyPress={handleEnterNewItem}\n        />\n        {isLoadingInput ? <SpinnerInput src={asset_spinner} alt=\"asset_spinner\" /> : null}\n      </InputWrapper>\n      <TodoList>\n        {isLoadingTodoList ? (\n          <SpinnerTodoList src={asset_spinner} alt=\"asset_spinner\" />\n        ) : (\n          <>\n            {list.map(item => (\n              <Item key={item.id}>\n                {isLoadingCheckboxById === item.id ? (\n                  <SpinnerCheckbox type=\"checkbox\" defaultChecked disabled />\n                ) : (\n                  <Checkbox type=\"checkbox\" checked={item.isFinish} onChange={() => toggleFinishItem(item.id)} />\n                )}\n                <Description>{item.title}</Description>\n                <DeleteButton onClick={() => handleDeleteItem(item.id)} />\n              </Item>\n            ))}\n          </>\n        )}\n      </TodoList>\n    </Wrapper>\n  );\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}