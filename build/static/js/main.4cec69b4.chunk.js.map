{"version":3,"sources":["spinner.svg","index.tsx"],"names":["Wrapper","styled","div","InputWrapper","Input","input","TodoList","Checkbox","Description","span","DeleteButton","button","Item","SpinnerTodoList","img","SpinnerItem","SpinnerInput","SpinnerCheckbox","asset_spinner","App","React","useState","list","setList","title","setTitle","isLoadingTodoList","setIsLoadingTodoList","isLoadingInput","setIsLoadingInput","isLoadingCheckboxById","setIsLoadingCheckboxById","isLoadingItemById","setIsLoadingItemById","useEffect","pullList","axios","get","process","then","response","data","type","placeholder","value","onChange","event","currentTarget","onKeyPress","key","post","newItem","prevList","src","alt","map","item","id","defaultChecked","disabled","checked","isFinish","put","onClick","delete","filter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4cec69b4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/spinner.b4ec1ef2.svg\";","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\nimport styled from 'styled-components';\n\nimport './base.scss';\nimport { Todo } from './types';\nimport asset_spinner from './spinner.svg';\n\nconst Wrapper = styled.div`\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans',\n    'Helvetica Neue', sans-serif;\n  width: 100vw;\n  min-height: 100vh;\n  padding-top: 60px;\n  background-color: #f5f6ee;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst InputWrapper = styled.div`\n  width: 276px;\n  height: 45px;\n  position: relative;\n`;\n\nconst Input = styled.input`\n  border: none;\n  border-bottom: 2px solid #000000;\n  width: 100%;\n  height: 100%;\n  background-color: #f5f6ee;\n  text-align: center;\n  font-size: 14px;\n\n  &::placeholder {\n    color: #c4c4c4;\n  }\n\n  &:hover::placeholder {\n    color: #979797;\n  }\n\n  &:focus {\n    outline: none;\n    &::placeholder {\n      color: #979797;\n    }\n  }\n`;\n\nconst TodoList = styled.div`\n  width: 276px;\n  margin-top: 44px;\n`;\n\nconst Checkbox = styled.input`\n  &[type='checkbox'] {\n    width: 20px;\n    height: 20px;\n    border-radius: 5px;\n    outline: none;\n    background-color: white;\n    border: 0.2px solid #979797;\n    appearance: none;\n    position: relative;\n\n    &:hover {\n      cursor: pointer;\n    }\n\n    &:checked:after {\n      content: '✓';\n      position: absolute;\n      top: -3.5px;\n      left: 3px;\n    }\n  }\n`;\n\nconst Description = styled.span`\n  font-size: 14px;\n  margin-left: 10px;\n  line-height: 16.41px;\n  margin-top: 2px;\n  width: 224px;\n  /* background-color: red; */\n`;\n\nconst DeleteButton = styled.button`\n  /* background: yellow; */\n  margin-left: 5px;\n  height: 20px;\n  margin-top: -2px;\n\n  &:after {\n    color: #979797;\n    content: '✕';\n    visibility: hidden;\n  }\n\n  &:hover:after {\n    color: #000000;\n  }\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst Item = styled.div`\n  width: 100%;\n  margin-bottom: 12px;\n  display: flex;\n  border-radius: 5px;\n  /* background-color: lime; */\n\n  &:hover {\n    background-color: #e4e7d5;\n    ${DeleteButton}:after {\n      visibility: visible;\n    }\n  }\n`;\n\nconst SpinnerTodoList = styled.img`\n  text-align: center;\n  height: 20px;\n`;\n\nconst SpinnerItem = styled.img`\n  height: 15px;\n  margin-top: 3px;\n  margin-left: 4px;\n`;\n\nconst SpinnerInput = styled.img`\n  position: absolute;\n  height: 15px;\n  right: 0;\n  top: 14px;\n`;\n\nconst SpinnerCheckbox = styled(Checkbox)`\n  &[type='checkbox'] {\n    &:checked:after {\n      content: url(${asset_spinner});\n      transform: scale(0.063);\n      transform-origin: left top;\n      margin-top: 6px;\n      margin-left: 0.5px;\n    }\n  }\n`;\n\nfunction App() {\n  const [list, setList] = React.useState<Todo[]>([]);\n  const [title, setTitle] = React.useState('');\n  const [isLoadingTodoList, setIsLoadingTodoList] = React.useState(false);\n  const [isLoadingInput, setIsLoadingInput] = React.useState(false);\n  const [isLoadingCheckboxById, setIsLoadingCheckboxById] = React.useState('');\n  const [isLoadingItemById, setIsLoadingItemById] = React.useState('');\n\n  React.useEffect(() => {\n    pullList();\n  }, []);\n\n  const pullList = () => {\n    setIsLoadingTodoList(true);\n    axios.get(process.env.REACT_APP_BASE_URL + '/todo-list/').then(response => {\n      setIsLoadingTodoList(false);\n      const { data } = response;\n      setList(data);\n    });\n  };\n\n  const handleEnterNewItem = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (title !== '' && event.key === 'Enter') {\n      setIsLoadingInput(true);\n      axios.post(process.env.REACT_APP_BASE_URL + '/todo-list/', { title }).then(response => {\n        setIsLoadingInput(false);\n        const newItem: Todo = response.data;\n        setList(prevList => [...prevList, newItem]);\n        setTitle('');\n      });\n    }\n  };\n\n  const handleDeleteItem = (id: string) => {\n    setIsLoadingItemById(id);\n    axios.delete(process.env.REACT_APP_BASE_URL + '/todo-list/' + id).then(response => {\n      setIsLoadingItemById('');\n      setList(prevList => prevList.filter(item => item.id !== id));\n    });\n  };\n\n  const toogleFinishItem = (id: string) => {\n    setIsLoadingCheckboxById(id);\n    axios.put(process.env.REACT_APP_BASE_URL + '/todo-list/' + id).then(response => {\n      setIsLoadingCheckboxById('');\n      setList(prevList => prevList.map(item => (item.id === id ? { ...item, isFinish: !item.isFinish } : item)));\n    });\n  };\n\n  return (\n    <Wrapper>\n      <InputWrapper>\n        <Input\n          type=\"text\"\n          placeholder=\"Enter new task\"\n          value={title}\n          onChange={event => {\n            if (isLoadingInput === false) {\n              setTitle(event.currentTarget.value);\n            }\n          }}\n          onKeyPress={handleEnterNewItem}\n        />\n        {isLoadingInput ? <SpinnerInput src={asset_spinner} alt=\"asset_spinner\" /> : null}\n      </InputWrapper>\n      <TodoList>\n        {isLoadingTodoList ? (\n          <SpinnerTodoList src={asset_spinner} alt=\"asset_spinner\" />\n        ) : (\n          <>\n            {list.map(item => (\n              <Item key={item.id}>\n                {isLoadingCheckboxById === item.id ? (\n                  <SpinnerCheckbox type=\"checkbox\" defaultChecked disabled />\n                ) : (\n                  <Checkbox type=\"checkbox\" checked={item.isFinish} onChange={() => toogleFinishItem(item.id)} />\n                )}\n                <Description>{item.title}</Description>\n                {isLoadingItemById === item.id ? (\n                  <SpinnerItem src={asset_spinner} alt=\"asset_spinner\" />\n                ) : (\n                  <DeleteButton onClick={() => handleDeleteItem(item.id)} />\n                )}\n              </Item>\n            ))}\n          </>\n        )}\n      </TodoList>\n    </Wrapper>\n  );\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}